---
- name: Configure Manjaro i3WM with dotfiles and essential tools
  hosts: localhost
  connection: local
  become: yes
  vars:
    user_name: "{{ ansible_user_id }}"
    user_home: "{{ ansible_env.HOME }}"
    dotfiles_repo: "https://github.com/joaoariedi/dotfiles.git"
    dotfiles_dir: "{{ user_home }}/dotfiles"

  tasks:
    - name: Update system packages
      pacman:
        update_cache: yes
        upgrade: yes

    - name: Install base development tools
      pacman:
        name:
          - base-devel
          - git
          - curl
          - wget
          - unzip
          - stow
        state: present

    - name: Install i3 desktop environment packages
      pacman:
        name:
          - i3-wm
          - i3status
          - i3lock
          - dmenu
          - xorg-server
          - xorg-xinit
          - xorg-xrandr
          - xorg-xset
          - xorg-xsetroot
          - lightdm
          - lightdm-gtk-greeter
        state: present

    - name: Install terminal emulators and shell tools
      pacman:
        name:
          - alacritty
          - kitty
          - zsh
          - tmux
          - zsh-autosuggestions
          - zsh-syntax-highlighting
        state: present

    - name: Install desktop utilities
      pacman:
        name:
          - polybar
          - rofi
          - picom
          - feh
          - flameshot
          - thunar
          - thunar-volman
          - thunar-archive-plugin
          - file-roller
          - xarchiver
          - xfburn
          - nitrogen
        state: present

    - name: Install development tools
      pacman:
        name:
          - neovim
          - python
          - python-pip
          - nodejs
          - npm
        state: present

    - name: Install fonts
      pacman:
        name:
          - noto-fonts
          - noto-fonts-emoji
          - ttf-dejavu
          - ttf-liberation
          - ttf-opensans
          - ttf-fira-code
          - ttf-hack
        state: present
        
    - name: Install Manjaro-specific packages
      pacman:
        name:
          - manjaro-i3-settings
          - manjaro-zsh-config
          - i3status-manjaro
          - i3exit
          - i3-scrot
          - artwork-i3
          - conky-i3
          - dmenu-manjaro
        state: present

    - name: Install network and system tools
      pacman:
        name:
          - networkmanager
          - network-manager-applet
          - bluez
          - bluez-utils
          - pulseaudio
          - pulseaudio-bluetooth
          - pavucontrol
          - brightnessctl
          - acpi
          - lm_sensors
        state: present

    - name: Install media and utility packages
      pacman:
        name:
          - firefox
          - vlc
          - gimp
          - libreoffice-still
          - htop
          - btop
          - neofetch
          - tree
          - ripgrep
          - fd
          - bat
          - exa
          - zoxide
          - lazygit
        state: present

    - name: Enable and start essential services
      systemd:
        name: "{{ item }}"
        enabled: yes
        state: started
      loop:
        - NetworkManager
        - bluetooth
        - lightdm

    - name: Install Docker from official repository
      become: no
      shell: |
        # Install Docker from official Docker repository
        if ! command -v docker &> /dev/null; then
          # Install required packages
          sudo pacman -S --noconfirm curl
          
          # Download and install Docker
          curl -fsSL https://get.docker.com -o get-docker.sh
          sudo sh get-docker.sh
          
          # Clean up
          rm get-docker.sh
          
          # Enable and start Docker service
          sudo systemctl enable docker
          sudo systemctl start docker
        fi
      args:
        executable: /bin/bash

    - name: Install Docker Compose from GitHub
      become: no
      shell: |
        # Install Docker Compose v2
        if ! command -v docker-compose &> /dev/null; then
          DOCKER_COMPOSE_VERSION=$(curl -s https://api.github.com/repos/docker/compose/releases/latest | grep -Po '"tag_name": "\K[^"]*')
          sudo curl -L "https://github.com/docker/compose/releases/download/${DOCKER_COMPOSE_VERSION}/docker-compose-$(uname -s)-$(uname -m)" -o /usr/local/bin/docker-compose
          sudo chmod +x /usr/local/bin/docker-compose
        fi
      args:
        executable: /bin/bash

    - name: Add user to docker group
      user:
        name: "{{ user_name }}"
        groups: docker
        append: yes

    - name: Install AWS CLI v2
      become: no
      shell: |
        if ! command -v aws &> /dev/null; then
          cd /tmp
          curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip"
          unzip awscliv2.zip
          sudo ./aws/install
          rm -rf aws awscliv2.zip
        fi
      args:
        executable: /bin/bash

    - name: Install Heroku CLI
      become: no
      shell: |
        if ! command -v heroku &> /dev/null; then
          # Install Heroku CLI via npm (more reliable than snap on Arch)
          npm install -g heroku
        fi
      args:
        executable: /bin/bash

    - name: Install kubectl
      become: no
      shell: |
        if ! command -v kubectl &> /dev/null; then
          # Install kubectl from official Kubernetes repository
          curl -LO "https://dl.k8s.io/release/$(curl -L -s https://dl.k8s.io/release/stable.txt)/bin/linux/amd64/kubectl"
          sudo install -o root -g root -m 0755 kubectl /usr/local/bin/kubectl
          rm kubectl
        fi
      args:
        executable: /bin/bash

    - name: Install yay AUR helper
      become: no
      shell: |
        if ! command -v yay &> /dev/null; then
          cd /tmp
          git clone https://aur.archlinux.org/yay.git
          cd yay
          makepkg -si --noconfirm
          cd ~
          rm -rf /tmp/yay
        fi
      args:
        executable: /bin/bash

    - name: Install AUR packages
      become: no
      shell: yay -S --noconfirm {{ item }}
      loop:
        - starship
        - zellij
        - direnv
        - asdf-vm
        - brave-bin
        - visual-studio-code-bin
        - discord
        - spotify
        - tailscale
        - lazydocker
        - nerd-fonts-meslo

    - name: Enable and start tailscale
      systemd:
        name: tailscale
        enabled: yes
        state: started

    - name: Clone dotfiles repository
      become: no
      git:
        repo: "{{ dotfiles_repo }}"
        dest: "{{ dotfiles_dir }}"
        update: yes

    - name: Update font cache after AUR font installation
      become: no
      shell: |
        # Font cache refresh - Nerd fonts installed via AUR
        fc-cache -fv
        echo "Font cache updated"
      args:
        executable: /bin/bash

    - name: Stow dotfiles configurations
      become: no
      shell: |
        cd {{ dotfiles_dir }}
        # Create necessary directories first
        mkdir -p ~/.config
        # Stow all configurations
        stow alacritty i3 nvim polybar rofi starship tmux zsh zellij picom direnv kitty neofetch
      args:
        executable: /bin/bash

    - name: Change default shell to zsh
      user:
        name: "{{ user_name }}"
        shell: /bin/zsh

    - name: Install ASDF plugins and tools
      become: no
      shell: |
        source ~/.asdf/asdf.sh
        asdf plugin add nodejs https://github.com/asdf-vm/asdf-nodejs.git || true
        asdf plugin add python https://github.com/asdf-community/asdf-python.git || true
        asdf install nodejs latest
        asdf install python latest
        asdf global nodejs latest
        asdf global python latest
      args:
        executable: /bin/bash

    - name: Install LazyVim for Neovim
      become: no
      shell: |
        # Backup existing nvim config if it exists
        if [ -d "{{ user_home }}/.config/nvim" ]; then
          mv {{ user_home }}/.config/nvim {{ user_home }}/.config/nvim.bak
        fi
        # LazyVim will be installed via the stowed dotfiles
        echo "LazyVim will auto-install on first nvim launch"
      args:
        executable: /bin/bash

    - name: Configure i3 to start on login
      become: no
      copy:
        content: |
          #!/bin/sh
          exec i3
        dest: "{{ user_home }}/.xinitrc"
        mode: '0755'

    - name: Create user systemd directory
      become: no
      file:
        path: "{{ user_home }}/.config/systemd/user"
        state: directory
        mode: '0755'

    - name: Create polybar launch script
      become: no
      copy:
        content: |
          #!/bin/bash
          # Terminate already running bar instances
          killall -q polybar
          
          # Wait until the processes have been shut down
          while pgrep -u $UID -x polybar >/dev/null; do sleep 1; done
          
          # Launch polybar
          polybar main &
          
          echo "Polybar launched..."
        dest: "{{ user_home }}/.config/polybar/launch.sh"
        mode: '0755'

    - name: Configure polybar as user service
      become: no
      copy:
        content: |
          [Unit]
          Description=Polybar
          After=graphical-session.target

          [Service]
          Type=forking
          ExecStart={{ user_home }}/.config/polybar/launch.sh
          Restart=on-failure

          [Install]
          WantedBy=graphical-session.target
        dest: "{{ user_home }}/.config/systemd/user/polybar.service"

    - name: Enable user services
      become: no
      systemd:
        name: "{{ item }}"
        enabled: yes
        scope: user
      loop:
        - polybar

    - name: Set up keyboard layout and display settings
      become: no
      shell: |
        # Set keyboard layout (adjust as needed)
        setxkbmap us
        
        # Configure displays if needed (example for dual monitor)
        # xrandr --output HDMI-1 --right-of eDP-1 --auto
        
        echo "Display and keyboard configuration completed"
      args:
        executable: /bin/bash

    - name: Create useful aliases and functions
      become: no
      blockinfile:
        path: "{{ user_home }}/.zshrc"
        marker: "# {mark} ANSIBLE MANAGED BLOCK - Additional aliases"
        block: |
          # Additional system aliases
          alias ll='exa -la'
          alias la='exa -la'
          alias l='exa -l'
          alias grep='rg'
          alias find='fd'
          alias cat='bat'
          alias top='htop'
          
          # Git aliases
          alias g='git'
          alias gs='git status'
          alias ga='git add'
          alias gc='git commit'
          alias gp='git push'
          alias gl='git pull'
          alias gd='git diff'
          alias gb='git branch'
          alias gco='git checkout'
          
          # Docker aliases
          alias d='docker'
          alias dc='docker-compose'
          alias dps='docker ps'
          alias di='docker images'
          
          # Kubernetes aliases
          alias k='kubectl'
          alias kgp='kubectl get pods'
          alias kgs='kubectl get services'
          alias kgd='kubectl get deployments'
          alias kdp='kubectl describe pod'
          alias kds='kubectl describe service'
          alias kdd='kubectl describe deployment'
          
          # AWS aliases
          alias awsprofile='export AWS_PROFILE=$(aws configure list-profiles | fzf)'
          alias awsregion='export AWS_REGION=$(echo -e "us-east-1\nus-west-2\neus-west-1\nap-southeast-1" | fzf)'
          
          # Heroku aliases  
          alias h='heroku'
          alias hlog='heroku logs --tail'
          alias hdyno='heroku ps'

    - name: Configure additional system settings
      become: no
      shell: |
        # Create necessary directories
        mkdir -p ~/Pictures/Screenshots
        mkdir -p ~/Pictures/Wallpapers
        
        # Copy wallpaper if available
        if [ -f "{{ dotfiles_dir }}/backgrounds/nice-blue-background.png" ]; then
          cp "{{ dotfiles_dir }}/backgrounds/nice-blue-background.png" ~/Pictures/Wallpapers/
        fi
        
        echo "Additional system settings configured"
      args:
        executable: /bin/bash

    - name: Final system configuration
      debug:
        msg: |
          Manjaro i3WM setup completed successfully!
          
          Next steps:
          1. Reboot your system
          2. Login and select i3 as your window manager
          3. Launch neovim to complete LazyVim installation: nvim
          4. Configure Tailscale: sudo tailscale up
          5. Test your dotfiles configuration
          6. Start polybar: systemctl --user start polybar
          
          Installed tools:
          - Desktop: i3wm, polybar, rofi, picom, feh, nitrogen
          - Terminals: alacritty, kitty with zsh and starship prompt  
          - Development: neovim (LazyVim), docker, nodejs, python, aws-cli, heroku-cli, kubectl
          - Utilities: brave browser, VS Code, discord, spotify, lazygit, btop
          - Fonts: MesloLGS Nerd Font via AUR package
          - Manjaro-specific: i3exit, i3-scrot, manjaro themes and configs
          
          Your dotfiles have been stowed and configured automatically!
          Polybar service configured and ready to start.